upstream cdn {
    server cdn:8000;
}

server {
    listen 80;
   lua_need_request_body on;
   set $response_body '';
  body_filter_by_lua_block {
    -- arg[1] contains a chunk of response content
    local resp_body = string.sub(ngx.arg[1], 1, 1000)
    ngx.ctx.buffered = string.sub((ngx.ctx.buffered or "") .. resp_body, 1, 1000)
    -- arg[2] is true if this is the last chunk
    if ngx.arg[2] then
      ngx.var.response_body = ngx.ctx.buffered
    end;
  }

  set $req_header "";
    set $resp_header "";
    header_filter_by_lua '
      local h = ngx.req.get_headers()
      for k, v in pairs(h) do
          ngx.var.req_header = ngx.var.req_header .. k.."="..v.." "
      end
      local rh = ngx.resp.get_headers()
      for k, v in pairs(rh) do
          ngx.var.resp_header = ngx.var.resp_header .. k.."="..v.." "
      end
    ';

   location / {

#    content_by_lua_block {
#
#
#   }
    proxy_pass http://cdn;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_redirect off;
#     log_by_lua_file lua/request_logger.lua;
    }
}